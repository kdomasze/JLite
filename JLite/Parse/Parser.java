
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 01 20:29:42 CEST 2014
//----------------------------------------------------

package Parse;

import java_cup.runtime.*;
import Lex.Lexer;
import Parse.*;

/** CUP v0.10k generated parser.
  * @version Tue Apr 01 20:29:42 CEST 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\005\000\002\011\003\000\002\012\003\000\002" +
    "\012\002\000\002\013\003\000\002\013\004\000\002\014" +
    "\003\000\002\014\003\000\002\015\010\000\002\016\004" +
    "\000\002\017\002\000\002\017\003\000\002\021\002\000" +
    "\002\021\003\000\002\020\003\000\002\020\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\005\000\002\025\003" +
    "\000\002\026\004\000\002\027\004\000\002\027\004\000" +
    "\002\030\006\000\002\031\002\000\002\031\003\000\002" +
    "\032\003\000\002\032\005\000\002\033\004\000\002\034" +
    "\003\000\002\034\003\000\002\035\005\000\002\036\002" +
    "\000\002\036\003\000\002\037\003\000\002\037\004\000" +
    "\002\040\003\000\002\040\003\000\002\041\004\000\002" +
    "\042\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\003\000\002" +
    "\047\004\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\051\007\000\002\052\011\000\002\053\011" +
    "\000\002\054\007\000\002\055\007\000\002\056\005\000" +
    "\002\057\003\000\002\057\003\000\002\057\005\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\006\000\002\061\002\000\002\061\003\000\002\062\003" +
    "\000\002\062\005\000\002\063\005\000\002\064\006\000" +
    "\002\064\010\000\002\065\003\000\002\065\003\000\002" +
    "\066\003\000\002\066\004\000\002\066\003\000\002\067" +
    "\006\000\002\067\006\000\002\070\003\000\002\070\005" +
    "\000\002\070\005\000\002\071\003\000\002\071\005\000" +
    "\002\071\005\000\002\072\003\000\002\072\005\000\002" +
    "\072\005\000\002\073\003\000\002\073\005\000\002\073" +
    "\005\000\002\074\003\000\002\074\005\000\002\075\003" +
    "\000\002\075\005\000\002\076\003\000\002\076\005\000" +
    "\002\101\003\000\002\101\003\000\002\077\005\000\002" +
    "\100\002\000\002\100\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\010\002\ufff5\007\006\017\011\001\002\000" +
    "\004\002\ufff7\001\002\000\010\002\ufff4\007\ufff4\017\ufff4" +
    "\001\002\000\010\002\ufff1\007\ufff1\017\ufff1\001\002\000" +
    "\010\002\ufff6\007\006\017\011\001\002\000\004\002\277" +
    "\001\002\000\004\005\014\001\002\000\004\002\000\001" +
    "\002\000\010\002\ufff2\007\ufff2\017\ufff2\001\002\000\006" +
    "\012\uffee\020\017\001\002\000\004\012\uffed\001\002\000" +
    "\004\012\025\001\002\000\004\005\021\001\002\000\012" +
    "\005\ufffa\006\023\012\ufffa\015\ufffa\001\002\000\050\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002" +
    "\000\004\012\uffef\001\002\000\004\005\024\001\002\000" +
    "\050\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\030\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\001\002\000\014\004\026\005\021\007\035\013\uffec\021" +
    "\030\001\002\000\006\005\ufffb\016\ufffb\001\002\000\006" +
    "\007\177\012\175\001\002\000\004\005\174\001\002\000" +
    "\014\004\uffe7\005\uffe7\007\uffe7\013\uffe7\021\uffe7\001\002" +
    "\000\014\004\026\005\021\007\035\013\uffeb\021\030\001" +
    "\002\000\004\005\ufffd\001\002\000\004\005\046\001\002" +
    "\000\014\004\uffe6\005\uffe6\007\uffe6\013\uffe6\021\uffe6\001" +
    "\002\000\014\004\uffea\005\uffea\007\uffea\013\uffea\021\uffea" +
    "\001\002\000\014\004\uffe8\005\uffe8\007\uffe8\013\uffe8\021" +
    "\uffe8\001\002\000\004\013\042\001\002\000\004\005\ufffc" +
    "\001\002\000\010\002\ufff0\007\ufff0\017\ufff0\001\002\000" +
    "\006\007\uffe0\012\uffe0\001\002\000\006\007\uffe4\014\062" +
    "\001\002\000\004\007\061\001\002\000\010\007\uffe2\014" +
    "\uffe2\015\047\001\002\000\010\004\026\005\021\016\uffdd" +
    "\001\002\000\004\016\060\001\002\000\006\011\056\016" +
    "\uffdc\001\002\000\006\011\uffdb\016\uffdb\001\002\000\004" +
    "\005\055\001\002\000\006\011\uffd9\016\uffd9\001\002\000" +
    "\012\007\uffe2\011\uffe2\014\uffe2\016\uffe2\001\002\000\006" +
    "\004\026\005\021\001\002\000\006\011\uffda\016\uffda\001" +
    "\002\000\006\007\uffde\012\uffde\001\002\000\014\004\uffe5" +
    "\005\uffe5\007\uffe5\013\uffe5\021\uffe5\001\002\000\020\005" +
    "\021\015\073\022\074\027\106\032\067\043\107\044\111" +
    "\001\002\000\042\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014" +
    "\uffb3\016\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\001\002\000" +
    "\042\006\uffb4\007\uffb4\010\uffb4\011\uffb4\014\uffb4\016\uffb4" +
    "\030\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\001\002\000\036\007\uffa5" +
    "\010\uffa5\011\uffa5\016\uffa5\030\uffa5\031\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\001\002\000\042\006\uffb2\007\uffb2\010\uffb2\011\uffb2\014" +
    "\uffb2\016\uffb2\030\uffb2\031\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\001\002\000" +
    "\020\005\021\015\073\022\074\027\106\032\067\043\107" +
    "\044\111\001\002\000\036\007\uffa2\010\uffa2\011\uffa2\016" +
    "\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\001\002\000\016\007" +
    "\uff94\011\uff94\016\uff94\040\155\041\uff94\042\uff94\001\002" +
    "\000\012\007\uff90\011\uff90\016\uff90\042\167\001\002\000" +
    "\022\004\026\005\021\015\073\022\074\027\106\032\067" +
    "\043\107\044\111\001\002\000\042\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\014\uffb6\016\uffb6\030\uffb6\031\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\001\002\000\040\007\uffa7\010\uffa7\011\uffa7\014\157" +
    "\016\uffa7\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\001\002\000\014" +
    "\007\uff92\011\uff92\016\uff92\041\153\042\uff92\001\002\000" +
    "\004\007\uffe3\001\002\000\032\007\uff9c\011\uff9c\016\uff9c" +
    "\030\145\031\146\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040" +
    "\uff9c\041\uff9c\042\uff9c\001\002\000\026\007\uff99\011\uff99" +
    "\016\uff99\034\142\035\143\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\001\002\000\022\007\uff96\011\uff96\016\uff96" +
    "\036\140\037\137\040\uff96\041\uff96\042\uff96\001\002\000" +
    "\042\006\132\007\uffa9\010\uffa9\011\uffa9\014\uffa9\016\uffa9" +
    "\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\001\002\000\010\007\uff8f" +
    "\011\uff8f\016\uff8f\001\002\000\042\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\014\uffb7\016\uffb7\030\uffb7\031\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\001\002\000\004\005\021\001\002\000\042\006\uffff" +
    "\007\uffff\010\uffff\011\uffff\014\uffff\016\uffff\030\uffff\031" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\041\uffff\042\uffff\001\002\000\036\007\uff9f\010\122\011" +
    "\uff9f\016\uff9f\030\uff9f\031\uff9f\033\123\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\001\002\000" +
    "\042\006\ufffe\007\ufffe\010\ufffe\011\ufffe\014\ufffe\016\ufffe" +
    "\030\ufffe\031\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\001\002\000\044\006\023" +
    "\007\uffa8\010\uffa8\011\uffa8\014\uffa8\015\113\016\uffa8\030" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\001\002\000\022\005\021\015" +
    "\073\016\uffb0\022\074\027\106\032\067\043\107\044\111" +
    "\001\002\000\004\016\121\001\002\000\006\011\uffae\016" +
    "\uffae\001\002\000\006\011\117\016\uffaf\001\002\000\020" +
    "\005\021\015\073\022\074\027\106\032\067\043\107\044" +
    "\111\001\002\000\006\011\uffad\016\uffad\001\002\000\042" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\014\uffab\016\uffab\030" +
    "\uffab\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\042\uffab\001\002\000\020\005\021\015" +
    "\073\022\074\027\106\032\067\043\107\044\111\001\002" +
    "\000\020\005\021\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\036\007\uffa0\010\uffa0\011\uffa0" +
    "\016\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\001\002\000\036" +
    "\007\uffa7\010\uffa7\011\uffa7\016\uffa7\030\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\001\002\000\036\007\uffa1\010\uffa1\011\uffa1\016" +
    "\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\001\002\000\004\015" +
    "\130\001\002\000\004\016\131\001\002\000\042\006\uffb1" +
    "\007\uffb1\010\uffb1\011\uffb1\014\uffb1\016\uffb1\030\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\001\002\000\004\005\133\001\002\000" +
    "\044\006\uffac\007\uffac\010\uffac\011\uffac\014\uffac\015\134" +
    "\016\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\001\002\000\022" +
    "\005\021\015\073\016\uffb0\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\004\016\136\001\002\000\042" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\014\uffaa\016\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\001\002\000\020\005\021\015" +
    "\073\022\074\027\106\032\067\043\107\044\111\001\002" +
    "\000\020\005\021\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\026\007\uff98\011\uff98\016\uff98" +
    "\034\142\035\143\036\uff98\037\uff98\040\uff98\041\uff98\042" +
    "\uff98\001\002\000\020\005\021\015\073\022\074\027\106" +
    "\032\067\043\107\044\111\001\002\000\020\005\021\015" +
    "\073\022\074\027\106\032\067\043\107\044\111\001\002" +
    "\000\032\007\uff9a\011\uff9a\016\uff9a\030\145\031\146\034" +
    "\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a" +
    "\001\002\000\020\005\021\015\073\022\074\027\106\032" +
    "\067\043\107\044\111\001\002\000\020\005\021\015\073" +
    "\022\074\027\106\032\067\043\107\044\111\001\002\000" +
    "\036\007\uff9d\010\122\011\uff9d\016\uff9d\030\uff9d\031\uff9d" +
    "\033\123\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\001\002\000\036\007\uff9e\010\122\011\uff9e" +
    "\016\uff9e\030\uff9e\031\uff9e\033\123\034\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\001\002\000\032" +
    "\007\uff9b\011\uff9b\016\uff9b\030\145\031\146\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\001\002" +
    "\000\026\007\uff97\011\uff97\016\uff97\034\142\035\143\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\001\002\000\020" +
    "\005\021\015\073\022\074\027\106\032\067\043\107\044" +
    "\111\001\002\000\016\007\uff93\011\uff93\016\uff93\040\155" +
    "\041\uff93\042\uff93\001\002\000\020\005\021\015\073\022" +
    "\074\027\106\032\067\043\107\044\111\001\002\000\022" +
    "\007\uff95\011\uff95\016\uff95\036\140\037\137\040\uff95\041" +
    "\uff95\042\uff95\001\002\000\020\005\021\015\073\022\074" +
    "\027\106\032\067\043\107\044\111\001\002\000\010\007" +
    "\uff8e\011\uff8e\016\uff8e\001\002\000\004\016\165\001\002" +
    "\000\004\016\163\001\002\000\020\005\021\015\073\022" +
    "\074\027\106\032\067\043\107\044\111\001\002\000\036" +
    "\007\uffa4\010\uffa4\011\uffa4\016\uffa4\030\uffa4\031\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\001\002\000\060\005\021\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\014\uffb5\015\073\016\uffb5\022\074\027\106" +
    "\030\uffb5\031\uffb5\032\067\033\uffb5\034\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\107\044\111" +
    "\001\002\000\036\007\uffa3\010\uffa3\011\uffa3\016\uffa3\030" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\001\002\000\020\005\021\015" +
    "\073\022\074\027\106\032\067\043\107\044\111\001\002" +
    "\000\014\007\uff91\011\uff91\016\uff91\041\153\042\uff91\001" +
    "\002\000\036\007\uffa6\010\uffa6\011\uffa6\016\uffa6\030\uffa6" +
    "\031\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\001\002\000\014\004\uffe9\005\uffe9" +
    "\007\uffe9\013\uffe9\021\uffe9\001\002\000\006\007\uffdf\012" +
    "\uffdf\001\002\000\004\015\047\001\002\000\034\004\026" +
    "\005\021\007\206\012\175\013\uffd5\015\203\022\074\023" +
    "\212\025\223\026\215\027\106\043\107\044\111\001\002" +
    "\000\014\004\uffe1\005\uffe1\007\uffe1\013\uffe1\021\uffe1\001" +
    "\002\000\014\004\uffd7\005\uffd7\007\uffd7\013\uffd7\021\uffd7" +
    "\001\002\000\014\004\uffd8\005\uffd8\007\uffd8\013\uffd8\021" +
    "\uffd8\001\002\000\004\007\276\001\002\000\034\004\uffcc" +
    "\005\uffcc\007\uffcc\012\uffcc\013\uffcc\015\uffcc\022\uffcc\023" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\043\uffcc\044\uffcc\001\002" +
    "\000\020\005\021\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\036\004\uffc6\005\uffc6\007\uffc6" +
    "\012\uffc6\013\uffc6\015\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\043\uffc6\044\uffc6\001\002\000\012" +
    "\005\ufffa\006\023\014\uffa8\015\113\001\002\000\036\004" +
    "\uffc2\005\uffc2\007\uffc2\012\uffc2\013\uffc2\015\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\043\uffc2\044" +
    "\uffc2\001\002\000\036\004\uffc5\005\uffc5\007\uffc5\012\uffc5" +
    "\013\uffc5\015\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\027\uffc5\043\uffc5\044\uffc5\001\002\000\004\007\273" +
    "\001\002\000\004\007\uffc0\001\002\000\004\015\245\001" +
    "\002\000\004\013\244\001\002\000\034\004\uffd0\005\uffd0" +
    "\007\uffd0\012\uffd0\013\uffd0\015\uffd0\022\uffd0\023\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\043\uffd0\044\uffd0\001\002\000\022" +
    "\005\021\007\uff8d\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\036\004\uffc3\005\uffc3\007\uffc3" +
    "\012\uffc3\013\uffc3\015\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\043\uffc3\044\uffc3\001\002\000\004" +
    "\014\157\001\002\000\010\006\uffb4\007\uffbe\014\uffb4\001" +
    "\002\000\034\004\uffca\005\uffca\007\uffca\012\uffca\013\uffca" +
    "\015\uffca\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\043" +
    "\uffca\044\uffca\001\002\000\010\006\uffb2\007\uffbf\014\uffb2" +
    "\001\002\000\004\015\235\001\002\000\034\004\uffd3\005" +
    "\uffd3\007\uffd3\012\uffd3\013\uffd3\015\uffd3\022\uffd3\023\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\043\uffd3\044\uffd3\001\002\000" +
    "\034\004\uffd1\005\uffd1\007\uffd1\012\uffd1\013\uffd1\015\uffd1" +
    "\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\043\uffd1\044" +
    "\uffd1\001\002\000\034\004\uffcd\005\uffcd\007\uffcd\012\uffcd" +
    "\013\uffcd\015\uffcd\022\uffcd\023\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\043\uffcd\044\uffcd\001\002\000\036\004\uffc4\005\uffc4" +
    "\007\uffc4\012\uffc4\013\uffc4\015\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\043\uffc4\044\uffc4\001\002" +
    "\000\034\004\026\005\021\007\206\012\175\013\uffd4\015" +
    "\203\022\074\023\212\025\223\026\215\027\106\043\107" +
    "\044\111\001\002\000\034\004\uffcb\005\uffcb\007\uffcb\012" +
    "\uffcb\013\uffcb\015\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\043\uffcb\044\uffcb\001\002\000\004\005\055\001" +
    "\002\000\004\007\uffce\001\002\000\034\004\uffd2\005\uffd2" +
    "\007\uffd2\012\uffd2\013\uffd2\015\uffd2\022\uffd2\023\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\043\uffd2\044\uffd2\001\002\000\020" +
    "\005\021\015\073\022\074\027\106\032\067\043\107\044" +
    "\111\001\002\000\004\016\237\001\002\000\030\005\021" +
    "\007\206\012\175\015\203\022\074\023\212\025\223\026" +
    "\215\027\106\043\107\044\111\001\002\000\034\004\uffba" +
    "\005\uffba\007\uffba\012\uffba\013\uffba\015\uffba\022\uffba\023" +
    "\uffba\025\uffba\026\uffba\027\uffba\043\uffba\044\uffba\001\002" +
    "\000\004\007\243\001\002\000\004\007\uff8c\001\002\000" +
    "\036\004\uffb8\005\uffb8\007\uffb8\012\uffb8\013\uffb8\015\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\043" +
    "\uffb8\044\uffb8\001\002\000\040\004\uffd6\005\uffd6\007\uffd6" +
    "\012\uffd6\013\uffd6\015\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\043\uffd6\044\uffd6\001\002" +
    "\000\020\005\021\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\004\016\247\001\002\000\030" +
    "\005\021\007\206\012\175\015\203\022\074\023\254\025" +
    "\252\026\215\027\106\043\107\044\111\001\002\000\034" +
    "\004\uffbd\005\uffbd\007\uffbd\012\uffbd\013\uffbd\015\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd\043\uffbd\044\uffbd" +
    "\001\002\000\036\004\uffcd\005\uffcd\007\uffcd\012\uffcd\013" +
    "\uffcd\015\uffcd\022\uffcd\023\uffcd\024\uffc9\025\uffcd\026\uffcd" +
    "\027\uffcd\043\uffcd\044\uffcd\001\002\000\004\015\267\001" +
    "\002\000\004\024\266\001\002\000\004\015\257\001\002" +
    "\000\004\024\uffc8\001\002\000\004\024\uffc7\001\002\000" +
    "\020\005\021\015\073\022\074\027\106\032\067\043\107" +
    "\044\111\001\002\000\004\016\261\001\002\000\030\005" +
    "\021\007\206\012\175\015\203\022\074\023\254\025\252" +
    "\026\215\027\106\043\107\044\111\001\002\000\004\024" +
    "\263\001\002\000\030\005\021\007\206\012\175\015\203" +
    "\022\074\023\254\025\252\026\215\027\106\043\107\044" +
    "\111\001\002\000\034\004\uffbc\005\uffbc\007\uffbc\012\uffbc" +
    "\013\uffbc\015\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\043\uffbc\044\uffbc\001\002\000\004\024\uffbb\001\002" +
    "\000\030\005\021\007\206\012\175\015\203\022\074\023" +
    "\212\025\223\026\215\027\106\043\107\044\111\001\002" +
    "\000\020\005\021\015\073\022\074\027\106\032\067\043" +
    "\107\044\111\001\002\000\004\016\271\001\002\000\030" +
    "\005\021\007\206\012\175\015\203\022\074\023\254\025" +
    "\252\026\215\027\106\043\107\044\111\001\002\000\004" +
    "\024\uffb9\001\002\000\034\004\uffcf\005\uffcf\007\uffcf\012" +
    "\uffcf\013\uffcf\015\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\043\uffcf\044\uffcf\001\002\000\004\016\275\001" +
    "\002\000\006\006\uffb5\014\uffb5\001\002\000\036\004\uffc1" +
    "\005\uffc1\007\uffc1\012\uffc1\013\uffc1\015\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\043\uffc1\044\uffc1" +
    "\001\002\000\004\002\001\001\002\000\010\002\ufff3\007" +
    "\ufff3\017\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\016\003\007\011\011\012\003\013\006\014" +
    "\004\015\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\277\015\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\014\017\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\021\010\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\033\006\032" +
    "\007\040\010\017\020\031\021\037\022\035\023\036\026" +
    "\030\027\026\001\001\000\002\001\001\000\006\034\175" +
    "\035\177\001\001\000\004\030\172\001\001\000\002\001" +
    "\001\000\022\005\033\006\032\007\040\010\017\022\171" +
    "\023\036\026\030\027\026\001\001\000\002\001\001\000" +
    "\010\024\044\025\043\030\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\052\006\032\007\040\010\017\031\047\032\050\033\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\052\006\032\007\040\010\017\033" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\004\104\010\111\057\102\060\063\063" +
    "\062\064\065\065\074\066\067\067\064\070\107\071\077" +
    "\072\100\073\101\074\070\075\075\076\071\077\103\101" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\104\010\111\057" +
    "\102\060\063\063\062\064\065\065\124\066\170\067\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\004\104\006\161\010\111\057\102\060\063" +
    "\063\062\064\065\065\074\066\067\067\064\070\107\071" +
    "\077\072\100\073\101\074\070\075\075\076\071\077\103" +
    "\101\160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\126\010\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\004\104\010\111\057\102\060\063" +
    "\061\113\062\115\063\062\064\065\065\074\066\067\067" +
    "\064\070\107\071\077\072\100\073\101\074\070\075\075" +
    "\076\071\077\103\101\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\004\104\010\111" +
    "\057\102\060\063\063\062\064\065\065\074\066\067\067" +
    "\064\070\107\071\077\072\100\073\101\074\070\075\075" +
    "\076\071\077\103\101\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\104\010\111\057\102\060\063" +
    "\063\062\064\065\065\124\066\125\067\064\001\001\000" +
    "\024\004\104\010\111\057\102\060\063\063\062\064\065" +
    "\065\124\066\123\067\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\004\104\010\111\057\102\060\063\061\134" +
    "\062\115\063\062\064\065\065\074\066\067\067\064\070" +
    "\107\071\077\072\100\073\101\074\070\075\075\076\071" +
    "\077\103\101\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\104\010\111\057\102\060\063\063\062" +
    "\064\065\065\124\066\067\067\064\070\107\071\077\072" +
    "\151\001\001\000\032\004\104\010\111\057\102\060\063" +
    "\063\062\064\065\065\124\066\067\067\064\070\107\071" +
    "\077\072\140\001\001\000\002\001\001\000\030\004\104" +
    "\010\111\057\102\060\063\063\062\064\065\065\124\066" +
    "\067\067\064\070\107\071\150\001\001\000\030\004\104" +
    "\010\111\057\102\060\063\063\062\064\065\065\124\066" +
    "\067\067\064\070\107\071\143\001\001\000\002\001\001" +
    "\000\026\004\104\010\111\057\102\060\063\063\062\064" +
    "\065\065\124\066\067\067\064\070\147\001\001\000\026" +
    "\004\104\010\111\057\102\060\063\063\062\064\065\065" +
    "\124\066\067\067\064\070\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\104\010\111\057\102\060\063\063\062\064\065" +
    "\065\124\066\067\067\064\070\107\071\077\072\100\073" +
    "\101\074\153\001\001\000\002\001\001\000\034\004\104" +
    "\010\111\057\102\060\063\063\062\064\065\065\124\066" +
    "\067\067\064\070\107\071\077\072\100\073\155\001\001" +
    "\000\002\001\001\000\046\004\104\010\111\057\102\060" +
    "\063\063\062\064\065\065\074\066\067\067\064\070\107" +
    "\071\077\072\100\073\101\074\070\075\075\076\071\077" +
    "\103\101\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\104\010\111\057\102\060" +
    "\063\063\062\064\065\065\124\066\163\067\064\001\001" +
    "\000\002\001\001\000\024\004\104\010\111\057\102\060" +
    "\063\063\062\064\065\065\124\066\165\067\064\001\001" +
    "\000\002\001\001\000\040\004\104\010\111\057\102\060" +
    "\063\063\062\064\065\065\124\066\067\067\064\070\107" +
    "\071\077\072\100\073\101\074\070\075\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\004\104\005\231\006" +
    "\032\007\040\010\204\035\203\036\212\037\227\040\223" +
    "\041\224\042\207\043\213\045\225\046\206\047\226\050" +
    "\200\051\201\052\230\054\220\056\215\057\102\060\217" +
    "\063\062\064\221\065\216\077\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\004\104\010\111\057\102\060" +
    "\063\063\062\064\065\065\074\066\067\067\064\070\107" +
    "\071\077\072\100\073\101\074\070\075\075\076\071\077" +
    "\103\101\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\004\104\010\111\057\102\060\063\063" +
    "\062\064\065\065\074\066\067\067\064\070\107\071\077" +
    "\072\100\073\101\074\070\075\075\076\071\077\103\100" +
    "\240\101\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\104\005\231\006" +
    "\032\007\040\010\204\035\203\040\233\041\224\042\207" +
    "\043\213\045\225\046\206\047\226\050\200\051\201\052" +
    "\230\054\220\056\215\057\102\060\217\063\062\064\221" +
    "\065\216\077\210\001\001\000\002\001\001\000\006\024" +
    "\232\025\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\104\010\111\057\102\060\063\063\062\064" +
    "\065\065\074\066\067\067\064\070\107\071\077\072\100" +
    "\073\101\074\070\075\075\076\071\077\103\101\235\001" +
    "\001\000\002\001\001\000\046\004\104\010\111\035\203" +
    "\043\237\045\225\046\206\047\226\050\200\051\201\052" +
    "\230\054\220\056\215\057\102\060\217\063\062\064\221" +
    "\065\216\077\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\004\104\010\111\057\102\060\063\063\062\064" +
    "\065\065\074\066\067\067\064\070\107\071\077\072\100" +
    "\073\101\074\070\075\075\076\071\077\103\101\245\001" +
    "\001\000\002\001\001\000\054\004\104\010\111\035\203" +
    "\043\247\044\252\045\250\046\206\047\226\050\200\051" +
    "\201\052\230\053\254\054\220\055\255\056\215\057\102" +
    "\060\217\063\062\064\221\065\216\077\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\004\104\010\111\057\102\060\063\063\062" +
    "\064\065\065\074\066\067\067\064\070\107\071\077\072" +
    "\100\073\101\074\070\075\075\076\071\077\103\101\257" +
    "\001\001\000\002\001\001\000\054\004\104\010\111\035" +
    "\203\043\247\044\261\045\250\046\206\047\226\050\200" +
    "\051\201\052\230\053\254\054\220\055\255\056\215\057" +
    "\102\060\217\063\062\064\221\065\216\077\210\001\001" +
    "\000\002\001\001\000\054\004\104\010\111\035\203\043" +
    "\263\044\264\045\250\046\206\047\226\050\200\051\201" +
    "\052\230\053\254\054\220\055\255\056\215\057\102\060" +
    "\217\063\062\064\221\065\216\077\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\004\104\010\111\035" +
    "\203\043\263\045\225\046\206\047\226\050\200\051\201" +
    "\052\230\054\220\056\215\057\102\060\217\063\062\064" +
    "\221\065\216\077\210\001\001\000\046\004\104\010\111" +
    "\057\102\060\063\063\062\064\065\065\074\066\067\067" +
    "\064\070\107\071\077\072\100\073\101\074\070\075\075" +
    "\076\071\077\103\101\267\001\001\000\002\001\001\000" +
    "\054\004\104\010\111\035\203\043\237\044\271\045\250" +
    "\046\206\047\226\050\200\051\201\052\230\053\254\054" +
    "\220\055\255\056\215\057\102\060\217\063\062\064\221" +
    "\065\216\077\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public Parser(Lexer l) {
    this();
    lexer=l;
  }

  public void syntax_error(java_cup.runtime.Symbol current) {
    report_error("Syntax error (" + current.sym + ")", current);
  }

  public void report_error(String message, java_cup.runtime.Symbol info) {
    lexer.errorMsg(message, info);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

    if(CUP$Parser$act_num < 59 )
       CUP$Parser$result=CUP$Parser$do_action_1(CUP$Parser$act_num,CUP$Parser$parser,CUP$Parser$stack,CUP$Parser$top);
    else
       CUP$Parser$result=CUP$Parser$do_action_2(CUP$Parser$act_num,CUP$Parser$parser,CUP$Parser$stack,CUP$Parser$top);

     return CUP$Parser$result;
     }

  /** Method with the generated switch code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_1(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode start_val = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= compilation_unit 
            {
              ParseNode RESULT = null;
		int culeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode cu = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = cu; 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // literal ::= INTEGER_LITERAL 
            {
              ParseNode RESULT = null;
		int integer_litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int integer_litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		java.lang.Number integer_lit = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("literal",parser.lexer.line_num);
	  pn.addChild("integer").setLiteral(integer_lit);
	  RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // literal ::= NULL_LITERAL 
            {
              ParseNode RESULT = null;
		
    RESULT=(new ParseNode("literal",parser.lexer.line_num)).addChild("null").getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= primitive_type 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= class_type 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=type; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // primitive_type ::= INT 
            {
              ParseNode RESULT = null;
		 RESULT=(new ParseNode("type",parser.lexer.line_num)).addChild("int").getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // class_type ::= name 
            {
              ParseNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode name = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    RESULT=(new ParseNode("type",parser.lexer.line_num)).addChild("class").addChild(name).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*class_type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // name ::= IDENTIFIER 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    RESULT=(new ParseNode("name",parser.lexer.line_num)).addChild("identifier").addChild(id).getRoot();  
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= name DOT IDENTIFIER 
            {
              ParseNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode name = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("name",parser.lexer.line_num);
    pn.addChild("base").addChild(name);
    pn.addChild("identifier").addChild(id);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*name*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compilation_unit ::= type_declarations_opt 
            {
              ParseNode RESULT = null;
		int tdoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tdoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode tdo = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("compilation_unit",parser.lexer.line_num);
    pn.addChild(tdo);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_declarations_opt ::= type_declarations 
            {
              ParseNode RESULT = null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode tds = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=tds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_declarations_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_declarations ::= type_declaration 
            {
              ParseNode RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode td = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("type_declaration_list",parser.lexer.line_num);
    pn.addChild(td);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_declarations ::= type_declarations type_declaration 
            {
              ParseNode RESULT = null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode tds = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode td = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    tds.addChild(td);
    RESULT=tds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_declaration ::= class_declaration 
            {
              ParseNode RESULT = null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode cd = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=cd; 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_declaration ::= SEMICOLON 
            {
              ParseNode RESULT = null;
		 
    RESULT=new ParseNode("empty",parser.lexer.line_num); 

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // class_declaration ::= CLASS IDENTIFIER super_opt LBRACE class_body_declarations_opt RBRACE 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParseNode so = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode body = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ParseNode pn=new ParseNode("class_declaration",parser.lexer.line_num);
    pn.addChild("name").addChild(id);
    pn.addChild("super").addChild(so);
    pn.addChild("classbody").addChild(body);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*class_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // super ::= EXTENDS class_type 
            {
              ParseNode RESULT = null;
		int classtypeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int classtyperight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode classtype = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=classtype; 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*super*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // super_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*super_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // super_opt ::= super 
            {
              ParseNode RESULT = null;
		int suleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int suright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode su = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=su; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*super_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_body_declarations_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // class_body_declarations_opt ::= class_body_declarations 
            {
              ParseNode RESULT = null;
		int cbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode cbd = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=cbd; 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*class_body_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_body_declarations ::= class_body_declaration 
            {
              ParseNode RESULT = null;
		int cbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode cbd = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("class_body_declaration_list",parser.lexer.line_num);
    pn.addChild(cbd);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // class_body_declarations ::= class_body_declarations class_body_declaration 
            {
              ParseNode RESULT = null;
		int cbdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cbdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode cbds = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cbdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cbdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode cbd = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    cbds.addChild(cbd);
    RESULT=cbds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*class_body_declarations*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // class_body_declaration ::= field_declaration 
            {
              ParseNode RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode field = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    RESULT=(new ParseNode("field",parser.lexer.line_num)).addChild(field).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // class_body_declaration ::= method_declaration 
            {
              ParseNode RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode method = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    RESULT=(new ParseNode("method",parser.lexer.line_num)).addChild(method).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // class_body_declaration ::= SEMICOLON 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*class_body_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // field_declaration ::= type variable_declarator SEMICOLON 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode var = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    ParseNode pn=new ParseNode("field_declaration",parser.lexer.line_num);
    pn.addChild("type").addChild(type);
    pn.addChild("variables").addChild(var);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*field_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declarator ::= variable_declarator_id 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode id = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("variable_declarator",parser.lexer.line_num);
    pn.addChild(id);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_declarator ::= variable_declarator_id EQ expression 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode id = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode init = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("variable_declarator",parser.lexer.line_num);
    pn.addChild(id);
    pn.addChild("initializer").addChild(init);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // variable_declarator_id ::= IDENTIFIER 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    RESULT=(new ParseNode("single",parser.lexer.line_num)).addChild(id).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*variable_declarator_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // method_declaration ::= method_header method_body 
            {
              ParseNode RESULT = null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode header = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode body = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("method_declaration",parser.lexer.line_num);
    pn.addChild(header);
    pn.addChild("body").addChild(body);
    RESULT=pn;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*method_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // method_header ::= type method_declarator 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode decl = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("method_header",parser.lexer.line_num);
    pn.addChild("returntype").addChild(type);
    pn.addChild(decl);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*method_header*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // method_header ::= VOID method_declarator 
            {
              ParseNode RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode decl = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("method_header",parser.lexer.line_num);
    pn.addChild(decl);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*method_header*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // method_declarator ::= IDENTIFIER LPAREN formal_parameter_list_opt RPAREN 
            {
              ParseNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode params = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    ParseNode pn=new ParseNode("method_declarator",parser.lexer.line_num);
    pn.addChild("name").addChild(id);
    pn.addChild("parameters").addChild(params);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*method_declarator*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_parameter_list_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              ParseNode RESULT = null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode fpl = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=fpl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal_parameter_list ::= formal_parameter 
            {
              ParseNode RESULT = null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode fp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("formal_parameter_list",parser.lexer.line_num);
    pn.addChild(fp);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              ParseNode RESULT = null;
		int fplleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fplright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode fpl = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode fp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    fpl.addChild(fp);
    RESULT=fpl; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_parameter ::= type variable_declarator_id 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode name = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
ParseNode pn=new ParseNode("formal_parameter",parser.lexer.line_num);
    pn.addChild(type);
    pn.addChild(name);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // method_body ::= block 
            {
              ParseNode RESULT = null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode block = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=block; 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*method_body*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // method_body ::= SEMICOLON 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("no_method_body",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*method_body*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= LBRACE block_statements_opt RBRACE 
            {
              ParseNode RESULT = null;
		int bsoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode bso = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=bso; 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // block_statements_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // block_statements_opt ::= block_statements 
            {
              ParseNode RESULT = null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode bs = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=bs; 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // block_statements ::= block_statement 
            {
              ParseNode RESULT = null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode bs = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("block_statement_list",parser.lexer.line_num);
    pn.addChild(bs);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*block_statements*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // block_statements ::= block_statements block_statement 
            {
              ParseNode RESULT = null;
		int bssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode bss = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode bs = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    bss.addChild(bs);
    RESULT=bss; 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*block_statements*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // block_statement ::= local_variable_declaration_statement 
            {
              ParseNode RESULT = null;
		int lvdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lvdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode lvds = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=lvds; 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*block_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // block_statement ::= statement 
            {
              ParseNode RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode statement = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=statement; 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*block_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // local_variable_declaration_statement ::= local_variable_declaration SEMICOLON 
            {
              ParseNode RESULT = null;
		int lvdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lvdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode lvd = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=lvd; 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*local_variable_declaration_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // local_variable_declaration ::= type variable_declarator 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode var = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("local_variable_declaration",parser.lexer.line_num);
    pn.addChild(type);
    pn.addChild(var);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= statement_without_trailing_substatement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= if_then_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= if_then_else_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= while_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement_no_short_if ::= while_statement_no_short_if 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
  /** Method with the generated switch code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_2(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement_without_trailing_substatement ::= block 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement_without_trailing_substatement ::= empty_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement_without_trailing_substatement ::= expression_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement_without_trailing_substatement ::= return_statement 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // empty_statement ::= SEMICOLON 
            {
              ParseNode RESULT = null;
		 
    RESULT=new ParseNode("nop",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_statement ::= statement_expression SEMICOLON 
            {
              ParseNode RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode se = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    ParseNode pn=new ParseNode("expression",parser.lexer.line_num);
    pn.addChild(se);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement_expression ::= assignment 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement_expression ::= method_invocation 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement_expression ::= class_instance_creation_expression 
            {
              ParseNode RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=st; 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // if_then_statement ::= IF LPAREN expression RPAREN statement 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("ifstatement",parser.lexer.line_num);
    pn.addChild("condition").addChild(exp);
    pn.addChild("statement").addChild(st);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // if_then_else_statement ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int else_stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int else_stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode else_st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("ifstatement",parser.lexer.line_num);
    pn.addChild("condition").addChild(exp);
    pn.addChild("statement").addChild(st);
    pn.addChild("else_statement").addChild(else_st);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int else_stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int else_stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode else_st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("ifstatement",parser.lexer.line_num);
    pn.addChild("condition").addChild(exp);
    pn.addChild("statement").addChild(st);
    pn.addChild("else_statement").addChild(else_st);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("whilestatement",parser.lexer.line_num);
    pn.addChild("condition").addChild(exp);
    pn.addChild("statement").addChild(st);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*while_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode st = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("whilestatement",parser.lexer.line_num);
    pn.addChild("condition").addChild(exp);
    pn.addChild("statement").addChild(st);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // return_statement ::= RETURN expression_opt SEMICOLON 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    RESULT=(new ParseNode("return",parser.lexer.line_num)).addChild(exp).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*return_statement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primary ::= literal 
            {
              ParseNode RESULT = null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode lit = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=lit; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // primary ::= THIS 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("this",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // primary ::= LPAREN expression RPAREN 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // primary ::= class_instance_creation_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // primary ::= field_access 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // primary ::= method_invocation 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_instance_creation_expression ::= NEW class_type LPAREN RPAREN 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    ParseNode pn=new ParseNode("createobject",parser.lexer.line_num);
    pn.addChild(type);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*class_instance_creation_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // argument_list_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // argument_list_opt ::= argument_list 
            {
              ParseNode RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode args = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=args; 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // argument_list ::= expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("argument_list",parser.lexer.line_num);
    pn.addChild(exp);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*argument_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // argument_list ::= argument_list COMMA expression 
            {
              ParseNode RESULT = null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode list = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    list.addChild(exp);
    RESULT=list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*argument_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // field_access ::= primary DOT IDENTIFIER 
            {
              ParseNode RESULT = null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode base = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("fieldaccess",parser.lexer.line_num);
    pn.addChild("base").addChild(base);
    pn.addChild("field").addChild(id);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*field_access*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // method_invocation ::= name LPAREN argument_list_opt RPAREN 
            {
              ParseNode RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ParseNode name = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode args = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    ParseNode pn=new ParseNode("methodinvoke1",parser.lexer.line_num);
    pn.addChild(name);
    pn.addChild(args);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*method_invocation*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // method_invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              ParseNode RESULT = null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ParseNode base = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		java.lang.String name = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParseNode args = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
    ParseNode pn=new ParseNode("methodinvoke2",parser.lexer.line_num);
    pn.addChild("base").addChild(base);
    pn.addChild("id").addChild(name);
    pn.addChild(args);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*method_invocation*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // postfix_expression ::= primary 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // postfix_expression ::= name 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unary_expression ::= postfix_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unary_expression ::= NOT unary_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    RESULT=(new ParseNode("not",parser.lexer.line_num)).addChild(exp).getRoot(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_expression ::= cast_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(52/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // cast_expression ::= LPAREN primitive_type RPAREN unary_expression 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("cast1",parser.lexer.line_num);
    pn.addChild("type").addChild(type);
    pn.addChild("exp").addChild(exp);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cast_expression ::= LPAREN expression RPAREN unary_expression 
            {
              ParseNode RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode type = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("cast2",parser.lexer.line_num);
    pn.addChild("type").addChild(type);
    pn.addChild("exp").addChild(exp);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // multiplicative_expression ::= unary_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("mult",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("div",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(54/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // additive_expression ::= multiplicative_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("add",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("sub",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relational_expression ::= additive_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_expression ::= relational_expression LT additive_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("comp_lt",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_expression ::= relational_expression GT additive_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("comp_gt",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // equality_expression ::= relational_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("equal",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("not_equal",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // and_expression ::= equality_expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*and_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // and_expression ::= and_expression AND equality_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("bitwise_and",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(58/*and_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exclusive_or_expression ::= and_expression 
            {
              ParseNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode expr = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=expr; 
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("bitwise_xor",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // conditional_expression ::= exclusive_or_expression 
            {
              ParseNode RESULT = null;
		int exclorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exclorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exclor = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exclor; 
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // conditional_expression ::= conditional_expression OR exclusive_or_expression 
            {
              ParseNode RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode exp1 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp2 = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
    ParseNode pn=new ParseNode("bitwise_or",parser.lexer.line_num);
    pn.addChild(exp1);
    pn.addChild(exp2);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(60/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= conditional_expression 
            {
              ParseNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode expr = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=expr; 
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= assignment 
            {
              ParseNode RESULT = null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode assign = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=assign; 
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*expression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment ::= postfix_expression EQ expression 
            {
              ParseNode RESULT = null;
		int lvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ParseNode lvalue = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rvalueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rvalueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode rvalue = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
    ParseNode pn=new ParseNode("assignment",parser.lexer.line_num);
    ParseNode pnargs=pn.addChild("args");
    pnargs.addChild(lvalue);
    pnargs.addChild(rvalue);
    RESULT=pn; 
              CUP$Parser$result = new java_cup.runtime.Symbol(61/*assignment*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_opt ::= 
            {
              ParseNode RESULT = null;
		 RESULT=new ParseNode("empty",parser.lexer.line_num); 
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_opt ::= expression 
            {
              ParseNode RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ParseNode exp = (ParseNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT=exp; 
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

